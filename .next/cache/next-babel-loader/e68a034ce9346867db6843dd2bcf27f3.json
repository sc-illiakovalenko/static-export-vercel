{"ast":null,"code":"import 'cross-fetch/polyfill';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache, IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\nimport config from 'temp/config';\n/*\r\n  INTROSPECTION DATA\r\n  See https://www.apollographql.com/docs/react/recipes/fragment-matching.html\r\n  This enables the Apollo cache to process fragments on interface types correctly.\r\n  If this file does not exist, you may need to run the `jss graphql:update` script.\r\n*/\n\nimport introspectionQueryResultData from 'temp/GraphQLFragmentTypes.json';\n/*\r\n  QUERY LINK SELECTION\r\n  A link is transport which GraphQL queries are pushed across.\r\n  You have many choices.\r\n  See the apollo-link documentation for more details.\r\n\r\n  NOTE: to use Sitecore Experience Editor it is essential that your\r\n  link passes cookies along with requests (credentials: 'include').\r\n*/\n// choose between a basic HTTP link to run queries...\n// import { createHttpLink } from 'apollo-link-http';\n// const link = createHttpLink({ uri: endpoint, credentials: 'include' });\n// ...or a batched link (multiple queries within 10ms all go in one HTTP request)\n\nimport { BatchHttpLink } from 'apollo-link-batch-http'; // ...and an automatic persisted query link, which reduces bandwidth by using query hashes to alias content\n// the APQ link is _chained_ behind another link that performs the actual HTTP calls, so you can choose\n// APQ + batched, or APQ + http links for example.\n\nimport { createPersistedQueryLink } from 'apollo-link-persisted-queries';\n/**\r\n * Create new apollo client instance\r\n */\n\nexport default function GraphQLClientFactory(endpoint) {\n  /* HTTP link selection: default to batched + APQ */\n  var link = createPersistedQueryLink().concat(new BatchHttpLink({\n    uri: endpoint !== null && endpoint !== void 0 ? endpoint : config.graphqlEndpoint,\n    credentials: 'include',\n    headers: {\n      connection: 'keep-alive'\n    }\n  }));\n  var cache = new InMemoryCache({\n    fragmentMatcher: new IntrospectionFragmentMatcher({\n      introspectionQueryResultData: introspectionQueryResultData\n    })\n  });\n  return new ApolloClient({\n    ssrMode: false,\n    ssrForceFetchDelay: 100,\n    link: link,\n    cache: cache\n  });\n}","map":null,"metadata":{},"sourceType":"module"}