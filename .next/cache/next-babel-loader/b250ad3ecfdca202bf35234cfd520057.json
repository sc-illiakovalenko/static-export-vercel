{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ComponentPropsService } from '@sitecore-jss/sitecore-jss-nextjs';\nimport { componentModule } from 'temp/componentFactory';\nimport { layoutService } from 'lib/layout-service';\nimport { dictionaryService } from 'lib/dictionary-service';\nimport { config as packageConfig } from '../../package.json';\nimport nextConfig from '../../next.config';\n/**\r\n * Extract normalized Sitecore item path from query\r\n */\n\nconst extractPath = function (params, isExportMode, locale) {\n  var _params$path;\n\n  if (params === undefined) {\n    return '/';\n  }\n\n  if (isExportMode) {\n    // home page\n    if (!params.path) return '/';\n    console.log('FINAL PATH:::::', params.path.join('/').replace(`${locale}/`, '/'));\n    return params.path.join('/').replace(`${locale}/`, '/');\n  }\n\n  let path = Array.isArray(params.path) ? params.path.join('/') : (_params$path = params.path) !== null && _params$path !== void 0 ? _params$path : '/'; // Ensure leading '/'\n\n  if (!path.startsWith('/')) {\n    path = '/' + path;\n  }\n\n  return path;\n};\n/**\r\n * Determines whether context is GetServerSidePropsContext (SSR) or GetStaticPropsContext (SSG)\r\n * @param context {GetServerSidePropsContext | GetStaticPropsContext}\r\n */\n\n\nconst isServerSidePropsContext = function (context) {\n  return context.req !== undefined;\n};\n\nexport class SitecorePagePropsFactory {\n  constructor() {\n    _defineProperty(this, \"componentPropsService\", void 0);\n\n    this.componentPropsService = new ComponentPropsService();\n  }\n\n  get layoutService() {\n    // Just returning our REST layout service atm, but in the very\n    // near future we'll also have a GraphQL-based layout service.\n    // Stubbed out as getter for potential logic here (e.g. based on constructor props)...\n    return layoutService;\n  }\n\n  get dictionaryService() {\n    // Just returning our REST dictionary service atm, but in the very\n    // near future we'll also have a GraphQL-based dictionary service.\n    // Stubbed out as getter for potential logic here (e.g. based on constructor props)...\n    return dictionaryService;\n  }\n\n  detectLocale(context) {\n    const defaultLanguage = packageConfig.language;\n    if (!context.params || !context.params.path) return defaultLanguage;\n    const paths = context.params.path;\n    if (paths[0] === '') return defaultLanguage;\n    return nextConfig.languages.find(lang => lang === paths[0]) || defaultLanguage;\n  }\n  /**\r\n   * Create SitecorePageProps for given context (SSR / GetServerSidePropsContext or SSG / GetStaticPropsContext)\r\n   * @param context {GetServerSidePropsContext | GetStaticPropsContext}\r\n   * @see SitecorePageProps\r\n   */\n\n\n  async create(context) {\n    // Use context locale if Next.js i18n is configured, otherwise use language defined in package.json\n    const locale = this.detectLocale(context); // Get normalized Sitecore item path\n    // i18n disabled when use nextjs Export\n\n    const path = extractPath(context.params, !context.locale, locale);\n    console.log('DETECTED LOCALE AND PATH', locale, path);\n    let notFound = false; // Fetch layoutData from Layout Service, passing on req/res for SSR\n\n    const layoutData = await this.layoutService.fetchLayoutData(path, locale, isServerSidePropsContext(context) ? context.req : undefined, isServerSidePropsContext(context) ? context.res : undefined).catch(error => {\n      var _error$response;\n\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404) {\n        // Let 404s (invalid path) through.\n        // layoutData.sitecore.route will be missing, but\n        // layoutData.sitecore.context will provide valuable information\n        notFound = true;\n        return error.response.data;\n      }\n\n      throw error;\n    }); // Fetch dictionary data from Dictionary Service\n\n    const dictionary = await this.dictionaryService.fetchDictionaryData(locale); // Retrieve component props using side-effects defined on components level\n\n    let componentProps = {};\n\n    if (layoutData.sitecore.route) {\n      if (isServerSidePropsContext(context)) {\n        componentProps = await this.componentPropsService.fetchServerSideComponentProps({\n          layoutData: layoutData,\n          context,\n          componentModule\n        });\n      } else {\n        componentProps = await this.componentPropsService.fetchStaticComponentProps({\n          layoutData: layoutData,\n          context,\n          componentModule\n        });\n      }\n    }\n\n    return {\n      locale,\n      layoutData,\n      dictionary,\n      componentProps,\n      notFound\n    };\n  }\n\n}\nexport const sitecorePagePropsFactory = new SitecorePagePropsFactory();","map":null,"metadata":{},"sourceType":"module"}